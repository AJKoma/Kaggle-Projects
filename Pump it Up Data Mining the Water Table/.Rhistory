'gps_height', 'longitude', 'latitude',
'basin', 'region', 'region_code', 'district_code',
'construction_year')]<- cplttest
years <- as.integer(tyear_recorded)-test$construction_year
testX <- cbind(test[c('amount_tsh','gps_height','longitude','latitude','basin',
'region','region_code','district_code','population',
'extraction_type_group','extraction_type_class',
'management','management_group','payment','payment_type',
'water_quality','quality_group','quantity','quantity_group',
'source','source_type','source_class',
'waterpoint_type','waterpoint_type_group')],years)
testM <- as.matrix(as.data.frame(lapply(testX, as.numeric)))
result <- predict(model,testM)
result[result==1] <- 'functional'
result[result==2] <- 'functional needs repair'
result[result==3] <- 'non functional'
results[,i+1] <- result
}
for (i in 1:5){
set.seed(999)
cplt <- complete(imp,i)
X[c('amount_tsh', 'population',
'gps_height', 'longitude', 'latitude',
'basin', 'region', 'region_code', 'district_code',
'construction_year')]<- cplt
years <- as.integer(year_recorded)-X$construction_year
trainX <- cbind(X[c('amount_tsh','gps_height','longitude','latitude','basin','lga',
'region','region_code','district_code','population',
'extraction_type_group','extraction_type_class',
'management','management_group','payment','payment_type',
'water_quality','quality_group','quantity','quantity_group',
'source','source_type','source_class',
'waterpoint_type','waterpoint_type_group')],years)
data <- as.matrix(as.data.frame(lapply(trainX, as.numeric)))
label<-as.numeric(Y$status_group)
data <- xgb.DMatrix(data,label=label)
xgb <-  xgb.cv(data = data, objective = "multi:softmax", booster = "gbtree",
nrounds = 500, nfold = 5, early.stop.round = 10, num_class = 4, maximize = FALSE,
evaluation = "merror", eta = .2, max_depth = 12, colsample_bytree = .4)
min.error.idx = which.min(xgb$evaluation_log$test_merror_mean)
model <- xgboost(data = data, objective = "multi:softmax", booster = "gbtree",
eval_metric = "merror", nrounds = min.error.idx,
num_class = 4,eta = .2, max_depth = 14, colsample_bytree = .4)
cplttest <- complete(testimp,i)
test[c('amount_tsh', 'population',
'gps_height', 'longitude', 'latitude',
'basin', 'region', 'region_code', 'district_code',
'construction_year')]<- cplttest
years <- as.integer(tyear_recorded)-test$construction_year
testX <- cbind(test[c('amount_tsh','gps_height','longitude','latitude','basin','lga',
'region','region_code','district_code','population',
'extraction_type_group','extraction_type_class',
'management','management_group','payment','payment_type',
'water_quality','quality_group','quantity','quantity_group',
'source','source_type','source_class',
'waterpoint_type','waterpoint_type_group')],years)
testM <- as.matrix(as.data.frame(lapply(testX, as.numeric)))
result <- predict(model,testM)
result[result==1] <- 'functional'
result[result==2] <- 'functional needs repair'
result[result==3] <- 'non functional'
results[,i+1] <- result
}
results
for (k in 1:nrow(results)){
row <- results[k,]
u <- unique(row)
results[k,7] <- u[which.max(tabulate(match(row, u)))]
}
result9 <- data.frame(test$id,results[,7])
colnames(result9) <- c('id','status_group')
result9
summary(result9)
combination <- cbind(as.character(result9$status_group),
as.character(result5$status_group),
as.character(result3$status_group))
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
result10 <- data.frame(test$id,combinedresult)
colnames(result8) <- c('id','status_group')
colnames(result10) <- c('id','status_group')
result10 <- data.frame(test$id,combinedresult[,1])
colnames(result10) <- c('id','status_group')
sum(result9$status_group!=result5)
sum(result9$status_group!=result5$status_group)
sum(result9$status_group!=result10$status_group)
sum(result10$status_group!=result5$status_group)
sombination[result10$status_group!=result5$status_group]
combination[result10$status_group!=result5$status_group]
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,4] <- u[which.max(tabulate(match(row, u)))]
}
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
result10 <- data.frame(test$id,combinedresult[,1])
colnames(result10) <- c('id','status_group')
combination[result10$status_group!=result5$status_group]
combination
combination[result10$status_group!=result5$status_group,]
combination[result9$status_group!=result5$status_group,]
tyear_recorded <- format(as.Date(test$date_recorded),format = "%Y")
results <- data.frame(test['id'])
for (i in 1:5){
set.seed(999)
cplt <- complete(imp,i)
X[c('amount_tsh', 'population',
'gps_height', 'longitude', 'latitude',
'basin', 'region', 'region_code', 'district_code',
'construction_year')]<- cplt
years <- as.integer(year_recorded)-X$construction_year
trainX <- cbind(X[c(#'amount_tsh','gps_height',
'longitude','latitude','basin','lga',
'region','region_code','district_code',#'population',
'extraction_type_group','extraction_type_class',
'management','management_group','payment','payment_type',
'water_quality','quality_group','quantity','quantity_group',
'source','source_type','source_class',
'waterpoint_type','waterpoint_type_group')],years)
data <- as.matrix(as.data.frame(lapply(trainX, as.numeric)))
label<-as.numeric(Y$status_group)
data <- xgb.DMatrix(data,label=label)
xgb <-  xgb.cv(data = data, objective = "multi:softmax", booster = "gbtree",
nrounds = 500, nfold = 5, early.stop.round = 10, num_class = 4, maximize = FALSE,
evaluation = "merror", eta = .2, max_depth = 12, colsample_bytree = .4)
min.error.idx = which.min(xgb$evaluation_log$test_merror_mean)
model <- xgboost(data = data, objective = "multi:softmax", booster = "gbtree",
eval_metric = "merror", nrounds = min.error.idx,
num_class = 4,eta = .2, max_depth = 14, colsample_bytree = .4)
cplttest <- complete(testimp,i)
test[c('amount_tsh', 'population',
'gps_height', 'longitude', 'latitude',
'basin', 'region', 'region_code', 'district_code',
'construction_year')]<- cplttest
years <- as.integer(tyear_recorded)-test$construction_year
testX <- cbind(test[c(#'amount_tsh','gps_height',
'longitude','latitude','basin','lga',
'region','region_code','district_code',#'population',
'extraction_type_group','extraction_type_class',
'management','management_group','payment','payment_type',
'water_quality','quality_group','quantity','quantity_group',
'source','source_type','source_class',
'waterpoint_type','waterpoint_type_group')],years)
testM <- as.matrix(as.data.frame(lapply(testX, as.numeric)))
result <- predict(model,testM)
result[result==1] <- 'functional'
result[result==2] <- 'functional needs repair'
result[result==3] <- 'non functional'
results[,i+1] <- result
}
combination[result9$status_group!=result5$status_group,]
M
setwd("C:/Users/Kiran/Desktop/2018 Spring/Data Science for Linguistics/word-out")
Crime = read.csv("crimeOut.csv")
View(Crime)
head(Crime,)
head(Crime)
str(Crime)
Crime <- Crime[,1:2]
Crime
setwd("C:/Users/Kiran/Desktop/2018 Spring/Data Science for Linguistics/word-out")
Crime <- read.csv("crimeOut.csv")
Crime <- Crime[,1:(ncol(Crime)-3)]
head(Crime)
write.csv(result9, 'result9.csv', row.names = FALSE)
write.csv(result10, 'result10.csv', row.names = FALSE)
Best5 <- read.csv('Results.csv')
Best5 <- read.csv('results.csv')
##
setwd("C:/Users/Kiran/Desktop/Pump it Up Data Mining the Water Table")
Best5 <- read.csv('results.csv')
Best5 <- read.csv('Results.csv')
Best5 <- read.csv('Results.xlsx')
Best5 <- read.csv('Results.csv')
head(Best5)
colnames(Best5) <- c(1,5,1)
head(Best5)
colnames(Best5) <- c(2,3,4,5,8)
head(Best5)
for (k in 1:nrow(Best5)){
row <- Best5[k,]
u <- unique(row)
Bests-Vote[k] <- u[which.max(tabulate(match(row, u)))]
}
for (k in 1:nrow(Best5)){
row <- Best5[k,]
u <- unique(row)
BV[k] <- u[which.max(tabulate(match(row, u)))]
}
for (k in 1:nrow(Best5)){
row <- Best5[k,]
u <- unique(row)
BV[k] <- u[which.max(tabulate(match(row, u)))]
}
BV <- data.frame(NA)
BV
for (k in 1:nrow(Best5)){
row <- Best5[k,]
u <- unique(row)
BV[k] <- u[which.max(tabulate(match(row, u)))]
}
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
for (k in 1:nrow(Best5)){
row <- Best5[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
combinedresult
head(Best5)
for (k in 1:nrow(Best5)){
row <- Best5[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
combinedresult
combinedresult[,1]
combinedresult[,[1]]
combinedresult[1]
combinedresult[1][1]
combinedresult[1][,1]
combinedresult[1][1]
combinedresult[[1]][1]
combinedresult[[1]]
combinedresult[[1]]$
1
combinedresult$1
combinedresult$[1]
combinedresult[1]
combinedresult[[1]]
combinedresult[[]]
combinedresult[]
data.frame(combinedresult)
Best5
unique(Best5[1,])
unique(Best5[2,])
unique(Best5[4,])
??vote
combination <- cbind(as.character(result5$status_group),
as.character(result4$status_group),
as.character(result3$status_group))
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
result10 <- data.frame(test$id,combinedresult[,1])
colnames(result10) <- c('id','status_group')
#write.csv(result9, 'result9.csv', row.names = FALSE)
combination <- cbind(as.character(result5$status_group),
as.character(result4$status_group),
as.character(result3$status_group))
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
result10 <- data.frame(test$id,combinedresult[,1])
colnames(result10) <- c('id','status_group')
#write.csv(result9, 'result9.csv', row.names = FALSE)
colnames(result9) <- c('id','status_group')#7
combination <- cbind(as.character(result9$status_group),
as.character(result5$status_group),
as.character(result3$status_group))
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
result10 <- data.frame(test$id,combinedresult[,1])
colnames(result10) <- c('id','status_group')
result10
combination <- cbind(as.character(result9$status_group),
as.character(result5$status_group),
as.character(result3$status_group))
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
result10 <- data.frame(test$id,combinedresult[,1])
combinedresult
result10 <- data.frame(test$id,combinedresult)#[,1])
result10
result9 <- data.frame(test$id,results[,7])#7
result9 <- data.frame(test$id,results[,7])#7
colnames(result9) <- c('id','status_group')#7
combination <- cbind(as.character(result9$status_group),
as.character(result5$status_group),
as.character(result3$status_group))
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
combinedresult
combinedresult[,1]
combinedresult[,[1]]
combinedresult[[:]]
class(combinedresult)
for i in length(combinedresult){}
for (i in 1:length(combinedresult)){a[i] <- combinedresult[[i]][1]}
a <- rep(NA,length(combinedresult))
for (i in 1:length(combinedresult)){a[i] <- combinedresult[[i]][1]}
a
for (k in 1:nrow(C5.0.results)){
row <- C5.0.results[k,]
u <- unique(row)
C5.0.results[k,7] <- u[which.max(tabulate(match(row, u)))]
}
result6 <- data.frame(test$id,C5.0.results[,7])
result6
for (k in 1:nrow(results)){
row <- results[k,]
u <- unique(row)
results[k,7] <- u[which.max(tabulate(match(row, u)))]
}
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,ncol(combination)+1] <- u[which.max(tabulate(match(row, u)))]
}
combination <- cbind(as.character(result9$status_group),
as.character(result5$status_group),
as.character(result3$status_group))
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,ncol(combination)+1] <- u[which.max(tabulate(match(row, u)))]
}
combination <- cbind(as.character(result9$status_group),
as.character(result5$status_group),
as.character(result3$status_group))
combination
combination[k,4] <- u[which.max(tabulate(match(row, u)))]
combination <- cbind(test$id,
as.character(result9$status_group),
as.character(result5$status_group),
as.character(result3$status_group))
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,4] <- u[which.max(tabulate(match(row, u)))]
}
result10
result10 <- data.frame(test$id,combination[,4])#[,1])
result10
colnames(result10) <- c('id','status_group')
result9
write.csv(result9, 'result9.csv', row.names = FALSE)
combination <- cbind(test$id,
as.character(result9$status_group),
as.character(result8$status_group),
as.character(result5$status_group),
as.character(result4$status_group),
as.character(result3$status_group),
as.character(result2$status_group))
result <- read.csv('result2.csv')
combination <- cbind(test$id,
as.character(result9$status_group),
as.character(result8$status_group),
as.character(result5$status_group),
as.character(result4$status_group),
as.character(result3$status_group),
as.character(result2$status_group))
result2 <- read.csv('result2.csv')
combination <- cbind(test$id,
as.character(result9$status_group),
as.character(result8$status_group),
as.character(result5$status_group),
as.character(result4$status_group),
as.character(result3$status_group),
as.character(result2$status_group))
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,8] <- u[which.max(tabulate(match(row, u)))]
}
result10 <- data.frame(test$id,combination[,8])
colnames(result10) <- c('id','status_group')
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,8] <- u[which.max(tabulate(match(row, u)))]
}
combination
head(combination)
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,8] <- u[which.max(tabulate(match(row, u)))]
}
row <- combination[1,]
row
u <- unique(row)
u[which.max(tabulate(match(row, u)))]
combination[1,8] <- u[which.max(tabulate(match(row, u)))]
combination <- cbind(test$id,
as.character(result9$status_group),
as.character(result8$status_group),
as.character(result5$status_group),
as.character(result4$status_group),
as.character(result3$status_group),
as.character(result2$status_group))
View(combination)
combination <- cbind(test$id,
result9$status_group,
as.character(result8$status_group),
as.character(result5$status_group),
as.character(result4$status_group),
as.character(result3$status_group),
as.character(result2$status_group))
combination <- cbind(test$id,
result9$status_group,
result8$status_group,
result5$status_group,
result4$status_group,
result3$status_group,
result2$status_group)
View(combination)
View(combination)
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,8] <- u[which.max(tabulate(match(row, u)))]
}
combination <- cbind(test$id,
as.character(result9$status_group),
as.character(result8$status_group),
as.character(result5$status_group),
as.character(result4$status_group),
as.character(result3$status_group),
as.character(result2$status_group))
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,8] <- u[which.max(tabulate(match(row, u)))]
}
##############################################################3
combination <- read.csv('Result.csv')
combination
##############################################################3
combination <- read.csv('Results.csv')
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,8] <- u[which.max(tabulate(match(row, u)))]
}
combination
colnames(combination) <- c('R2','R3''R4','R5','R8','R9')
colnames(combination) <- c('R2','R3','R4','R5','R8','R9')
row <- combination[k,]
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combination[k,8] <- u[which.max(tabulate(match(row, u)))]
}
combinedresult <- rep(NA,nrow(combination)
)
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k] <- u[which.max(tabulate(match(row, u)))]
}
combinedresult
row <- combination[1,]
u <- unique(row)
u[which.max(tabulate(match(row, u)))]
combinedresult <- rep(NA,nrow(combination))
combinedresult[1] <- u[which.max(tabulate(match(row, u)))]
combinedresult
combinedresult <- data.frame(rep(NA,nrow(combination)))
combinedresult
combinedresult[k,1] <- u[which.max(tabulate(match(row, u)))]
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k,1] <- u[which.max(tabulate(match(row, u)))]
}
combinedresult
combinedresult <- data.frame(test$id,rep(NA,nrow(combination)))
combinedresult
for (k in 1:nrow(combination)){
row <- combination[k,]
u <- unique(row)
combinedresult[k,2] <- u[which.max(tabulate(match(row, u)))]
}
combinedresult
result10 <- data.frame(test$id,combinedresult[,2])
result10
colnames(result10) <- c('id','status_group')
result10$status_group[result10$status_group==1] <- 'functional'
result10$status_group[result10$status_group==2] <- 'functional needs repair'
result10$status_group[result10$status_group==3] <- 'non functional'
result10
write.csv(result10, 'result10.csv', row.names = FALSE)
result10
write.csv(result10, 'result10.csv', row.names = FALSE)
source('C:/Users/Kiran/Desktop/Pump it Up Data Mining the Water Table/Code.R')
source('C:/Users/Kiran/Desktop/Pump it Up Data Mining the Water Table/Code.R')
source('C:/Users/Kiran/Desktop/Pump it Up Data Mining the Water Table/Code.R')
source('C:/Users/Kiran/Desktop/Pump it Up Data Mining the Water Table/Code.R')
